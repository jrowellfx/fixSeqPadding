#!/bin/bash

export LC_ALL=POSIX

# !!! This script MUST be run from the 'tests'
# !!! directory in the fixseqpadding git repo for this to work.
#
export TEST_DIR=`pwd`

if [[ `basename $TEST_DIR` != 'tests' ]]; then
    echo $0: error: not running from tests directory, aborted.
    exit 1
fi

ln -sf ../fixSeqPadding/__main__.py  fixseqpadding

if [[ ! ":$PATH:" == *":$TEST_DIR:"* ]]; then
    export PATH="$TEST_DIR:$PATH"
    # echo \# Run the following command once to help live testing.
    # echo export PATH=\"$TEST_DIR:\$PATH\"
fi

export REPO_DIR=`dirname $TEST_DIR`

unalias lsseq > /dev/null 2>&1
unalias fixseqpadding > /dev/null 2>&1
unalias rm > /dev/null 2>&1

tmpArgs=/tmp/tmpARGS_RENUM.$$
tmpfile=/tmp/tmpTEST_RENUM.$$

cleanup() {
    /bin/rm $tmpArgs > /dev/null 2>&1
    /bin/rm $tmpfile > /dev/null 2>&1
    exit 0
}

trap cleanup INT

# Double check sensible REPO_DIR value before removing old testdir
#
if [ -z "$REPO_DIR" ]; then
    echo $0: error: REPO_DIR was empty, dangerous recursive rm avoided.
    exit 1
elif [[ "$REPO_DIR" == "/" ]]; then
    echo $0: error: REPO_DIR set to root, dangerous recursive rm avoided.
    exit 1
elif [[ `basename $REPO_DIR` != 'fixSeqPadding' ]]; then
    echo $0: error: REPO_DIR might not be set to fixSeqPadding repo, dangerous recursive rm avoided.
    exit 1
fi
rm -rf $TEST_DIR/testdir/*

# Create list of test directories needed.
# Then touch the file names to make testfiles.
# Note: pwd should still be $TEST_DIR
#
cat createTestData/create.?Test.files | sed -e '1,$ s/\/[^\/]*$//' | sort -u > $tmpfile
mkdir -p `cat $tmpfile`
touch `cat createTestData/create.?Test.files`

# Timestamp the files to be older so that when we rename
# them we can use --touch to visually check the results more easily (ls -lt)
#
# Note: HAL's birthday from 2001: A Space Odyssey.
#
find testdir -type f -exec touch -t 199201121330 \{\} \;

# The following are tests. One test per line.
# The first item on a line is the directory relative to
#     $TEST_DIR/testdir to run the test in.
# The second is the command to run.
# The rest are args to the command.
#
cat << EOF > $tmpArgs
.   lsseq --version                         # Double check which version being used for this test.
.   lsseq -RPl --noErrorLists -g -m         # List all sequences in the testdir
a01 lsseq --silent -n -g -m
a01 fixseqpadding --verbose a.[0100-0140].jpg
a01 lsseq --silent -n -g -m
EOF

export NUM_TESTS=`wc -l < $tmpArgs`

echo ------ Begin Tests ------ > $TEST_DIR/test_fixseqpadding.out.new

set -f # Turn off globbing
i=1
while true; do
    declare -a args=(`sed -n -e "$i p" $tmpArgs | sed -e 's/#.*//' `)
    if [ ${#args[@]} -eq 0 ]; then
        break;
    fi
    workingDir=${args[0]}
    cmd=${args[1]}
    args=(${args[@]:2})
    echo "" >> $TEST_DIR/test_fixseqpadding.out.new
    echo --- Test $i of $NUM_TESTS ---
    echo --- Test $i --- dir:$workingDir --- $cmd ${args[@]} --- >> $TEST_DIR/test_fixseqpadding.out.new
    cd $TEST_DIR/testdir/$workingDir
    $cmd ${args[@]} >> $TEST_DIR/test_fixseqpadding.out.new 2>&1
    i=$(expr $i + 1)
done
set +f # Turn globbing back on

sed -e "1,$ s-$TEST_DIR-/...absPathToRepo.../renumSeq-g" < $TEST_DIR/test_fixseqpadding.out.new > $tmpfile
expand < $tmpfile | sed -e '1,$ s/ *$//' > $TEST_DIR/test_fixseqpadding.out.new

cleanup
